{"version":3,"sources":["components/CheckboxTS.tsx","components/SearchBox.tsx","components/CountryFilter.tsx","apis/api.ts","apis/color-conversions-algorithms.ts","models/timeSeries.ts","components/ParamsView.tsx","components/GraphView.tsx","components/CovidTracker.tsx","logo.svg","components/CustomPopover.tsx","components/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CheckboxTS","props","ListGroup","Item","onClick","series","action","variant","active","className","MiniCheckbox","isChecked","name","FormCheck","type","label","checked","onChange","SearchBar","Form","Group","controlId","Control","value","keyword","placeholder","e","str","target","setKeyword","CountryFilter","ts","onToggleActiveTS","onKeywordChange","setState","mKeyword","onSelectAll","select","state","data","this","sortedData","slice","sort","a","b","localeCompare","Col","Row","Button","map","toLowerCase","startsWith","Component","axios","create","baseURL","num2hex","x","toString","getColor","iter","h","s","v","i","Math","floor","f","p","q","t","r","g","hexR","hexG","hexB","hsvToHex","sumDTS","dtsA","dtsB","dtsC","time","k","length","entries","hexColor","push","common","res","indicesA","indicesB","idxA","idxB","valueA","valueOf","valueB","commonRange","idx","entA","entB","entC","numberOfCases","numberOfRecoveries","numberOfDeaths","numberOfNewCases","numberOfNewRecoveries","numberOfNewDeaths","rework","ref","Error","result","header","size","dates","Array","Date","dict","row","Number","countryName","trim","console","error","ParamsView","modeForm","id","Label","as","mode","onModeChange","GRAPH_MODE","newVSTotalConfirmed","totalConfirmedVSTime","totalRecoveredVSTime","totalDeceasedVSTime","newConfirmedVSTime","newRecoveredVSTime","newDeceasedVSTime","scaleForm","scaleType","onScaleChange","daysForm","val","onDaysChange","min","range","max","step","onKeyDown","preventDefault","htmlFor","doublingRange","doublingDaysForm","doShowRef","onShowRefChange","onDoublingDaysChange","showLegend","doShowLegend","onShowLegendChange","showDoublingDays","includes","Object","freeze","format","d","toISOString","formatHuman","tmp","getMinMax","values","init","MAX_VALUE","MIN_VALUE","reduce","acc","GraphView","newMode","newIsLogPlot","isLogPlot","newNumberOfDays","numberOfDays","newDoublingDays","doublingDays","newShowRef","newShowLegend","activeTS","dts","filter","xMin","xMax","xDataVal","xData","minMax","trace","y","yData","text","hovertemplate","template","showlegend","line","color","xRef","yRef","refTrace","dash","hoverinfo","count","from","avg","j","tmpC","smooth","tmpR","tmpD","note","title","start","end","layout","font","xaxis","xAxisTitle","xAxisType","hoverformat","xTickFormat","yaxis","yAxisTitle","yAxisType","autosize","legend","family","bgcolor","bordercolor","borderwidth","getData","plot","config","responsive","useResizeHandler","Alert","Heading","PRESET","CovidTracker","forEach","url","API","get","then","response","csvString","readString","parseResult","Promise","all","loadTimeSeries","dataConfirmed","dataRecovered","dataDeceased","c","dtsCon","dtsRec","dtsDec","log","dtsCR","dtsCRD","it","summed","u","deltaC","deltaR","deltaD","getTSFromJHU_Data","Container","fluid","sm","CustomPopover","React","useState","show","setShow","setTarget","useRef","event","buttonTitle","Overlay","placement","container","current","containerPadding","onEnter","undefined","onEntered","onEntering","onExit","onExited","onExiting","onHide","transition","rootClose","popperConfig","rootCloseEvent","Popover","popoverId","Title","popoverTitle","Content","popoverContent","Header","credits","href","rel","about","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","Link","src","logo","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0433a386.chunk.js","sourcesContent":["import '../App.css';\r\nimport {TimeSeries} from \"../models/timeSeries\";\r\nimport {FormCheck, ListGroup} from \"react-bootstrap\";\r\n\r\ninterface CheckboxTSProps\r\n{\r\n    series: TimeSeries;\r\n    onClick: (series: TimeSeries) => void;\r\n}\r\n\r\n// Dumb component that displays a checkable time series to toggle it to\r\n// active or inactive.\r\n// - The component aspect changes depending on whether the time series is\r\n// active or not.\r\n// - On click, the parent is notified that it needs to switch the active\r\n// status of the clicked time series. The parent will then call setState,\r\n// which will re-render this component\r\nexport function CheckboxTS(props: CheckboxTSProps): JSX.Element\r\n{\r\n    const handleChange = () =>\r\n    {\r\n        props.onClick(props.series);\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item onClick={handleChange}\r\n                        action\r\n                        variant={props.series.active ? 'success' : \"\"}\r\n                        className=\"unselectable-text\">\r\n            <MiniCheckbox isChecked={props.series.active}\r\n                          name={props.series.name}/>\r\n        </ListGroup.Item>\r\n    );\r\n\r\n    // constructor()\r\n    // {\r\n    //     super(props);\r\n    //     this.state = {\r\n    //         isChecked: props.series.active\r\n    //     };\r\n    // }\r\n\r\n    // handleChange = () =>\r\n    // {\r\n    //     const {isChecked} = this.state;\r\n    //     const newIsChecked = !isChecked;\r\n    //     this.props.onClick(this.props.series, newIsChecked);\r\n    //     this.setState(\r\n    //         {isChecked: newIsChecked}\r\n    //     );\r\n    // }\r\n    //\r\n    // render(): JSX.Element\r\n    // {\r\n    //     const {isChecked} = this.state;\r\n    //     return (\r\n    //         <ListGroup.Item onClick={this.handleChange}\r\n    //                         action\r\n    //                         variant={isChecked ? 'success' : \"\"}\r\n    //                         className=\"unselectable-text\">\r\n    //             {this.props.series.name}\r\n    //         </ListGroup.Item>\r\n    //     );\r\n    // }\r\n}\r\n\r\ninterface MiniCheckboxProps\r\n{\r\n    name: string;\r\n    isChecked: boolean;\r\n}\r\n\r\nfunction MiniCheckbox(props: MiniCheckboxProps): JSX.Element\r\n{\r\n    return <FormCheck\r\n        type='checkbox'\r\n        label={props.name}\r\n        checked={props.isChecked}\r\n        onChange={() =>\r\n        {\r\n        }}\r\n    />;\r\n}\r\n","import React from 'react';\r\nimport {Form} from \"react-bootstrap\";\r\n\r\n\r\ninterface SearchBoxProps\r\n{\r\n    keyword: string;\r\n    setKeyword: (str: string) => void;\r\n};\r\n\r\nexport function SearchBar(props: SearchBoxProps)\r\n{\r\n    const handleChange = (e: any) => {\r\n        const str: string = e.target.value;\r\n        props.setKeyword(str);\r\n    }\r\n\r\n    return (\r\n        <Form.Group controlId=\"search.ControlSearch\">\r\n            <Form.Control\r\n                type=\"text\"\r\n                value={props.keyword}\r\n                placeholder=\"Search for a location\"\r\n                onChange={handleChange}\r\n            />\r\n        </Form.Group>\r\n    );\r\n};\r\n","import React, {Component} from \"react\";\r\nimport {DatedTimeSeries, TimeSeries} from \"../models/timeSeries\";\r\nimport {CheckboxTS} from \"./CheckboxTS\";\r\nimport {\r\n    Button,\r\n    Col,\r\n    ListGroup,\r\n    Row\r\n} from \"react-bootstrap\";\r\nimport {SearchBar} from \"./SearchBox\";\r\n\r\ninterface CountryFilterProps\r\n{\r\n    series: DatedTimeSeries;\r\n    onToggleActiveTS: (series: TimeSeries) => void;\r\n    onSelectAll: (select: boolean) => void;\r\n}\r\n\r\ninterface CountryFilterState\r\n{\r\n    mKeyword: string;\r\n}\r\n\r\n// This component lets us select which countries to display by means of a\r\n// filtering system. It can access the data in its props.\r\n// - When parent component (CovidTracker) fetches all data at application\r\n//   start, it will cause the prop 'series' to automatically update.\r\nexport class CountryFilter\r\n    extends Component<CountryFilterProps, CountryFilterState>\r\n{\r\n    constructor(props: CountryFilterProps)\r\n    {\r\n        super(props);\r\n        this.state = {mKeyword: \"\"}\r\n    }\r\n\r\n    onClick = (ts: TimeSeries) =>\r\n    {\r\n        this.props.onToggleActiveTS(ts);\r\n    }\r\n\r\n    onKeywordChange = (keyword: string) =>\r\n    {\r\n        this.setState({mKeyword: keyword});\r\n    }\r\n\r\n    onSelectAll = (select: boolean) =>\r\n    {\r\n        this.props.onSelectAll(select);\r\n    }\r\n\r\n    render(): JSX.Element\r\n    {\r\n        const data = this.props.series.data;\r\n        const {mKeyword} = this.state;\r\n\r\n        const sortedData = data.slice();\r\n        sortedData.sort((a, b) =>\r\n        {\r\n            if (a.active === b.active) // a, b have same status\r\n            {\r\n                return a.name.localeCompare(b.name);\r\n            }\r\n            else\r\n            {\r\n                // a active => b is inactive, thus a is greater\r\n                // a inactive => b active thus b is greater\r\n                return a.active ? -1 : 1;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div className='head-country centered'>\r\n                    <Col>\r\n                        <Row className={'justify-content-center'}>\r\n                            <SearchBar keyword={mKeyword}\r\n                                       setKeyword={this.onKeywordChange}/>\r\n                        </Row>\r\n                        <Row className={'justify-content-center'}>\r\n                            <Button className=\"btn-sm country-button\"\r\n                                    onClick={() => this.onSelectAll(true)}\r\n                                    variant=\"success\">\r\n                                Select all\r\n                            </Button>\r\n                            <Button className=\"btn-sm country-button\"\r\n                                    onClick={() => this.onSelectAll(false)}\r\n                                    variant=\"danger\">\r\n                                Clear all\r\n                            </Button>\r\n                        </Row>\r\n                    </Col>\r\n                </div>\r\n                <ListGroup className='body-country'>\r\n                    {sortedData.map(ts => (\r\n                        (ts.active ||\r\n                            ts.name.toLowerCase()\r\n                                .startsWith(mKeyword.toLowerCase()))\r\n                        && <CheckboxTS key={ts.name}\r\n                                       series={ts}\r\n                                       onClick={this.onClick}/>\r\n                    ))}\r\n                </ListGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import axios from 'axios';\r\n\r\nexport const TS_CONFIRMED: string = \"time_series_covid19_confirmed_global.csv\";\r\nexport const TS_RECOVERED: string = \"time_series_covid19_recovered_global.csv\";\r\nexport const TS_DECEASED: string = \"time_series_covid19_deaths_global.csv\";\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/'\r\n});\r\n\r\n","function num2hex(x:number): string\r\n{\r\n    const expanded = '00' + x.toString(16);\r\n    return expanded.slice(-2);\r\n}\r\n\r\n/**\r\n * Converts an HSV color value to a string #rrggbb. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\r\n * Assumes h, s, and v are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Number  h       The hue\r\n * @param   Number  s       The saturation\r\n * @param   Number  v       The value\r\n * @return  string          The RGB representation as #rrggbb\r\n */\r\nexport function hsvToHex(h: number, s: number, v: number): string\r\n{\r\n\r\n    const i = Math.floor(h * 6);\r\n    const f = h * 6 - i;\r\n    const p = v * (1 - s);\r\n    const q = v * (1 - f * s);\r\n    const t = v * (1 - (1 - f) * s);\r\n\r\n    let r=0, g=0, b=0;\r\n    switch (i % 6)\r\n    {\r\n        case 0:\r\n            r = v;\r\n            g = t;\r\n            b = p;\r\n            break;\r\n        case 1:\r\n            r = q;\r\n            g = v;\r\n            b = p;\r\n            break;\r\n        case 2:\r\n            r = p;\r\n            g = v;\r\n            b = t;\r\n            break;\r\n        case 3:\r\n            r = p;\r\n            g = q;\r\n            b = v;\r\n            break;\r\n        case 4:\r\n            r = t;\r\n            g = p;\r\n            b = v;\r\n            break;\r\n        case 5:\r\n            r = v;\r\n            g = p;\r\n            b = q;\r\n            break;\r\n    }\r\n\r\n    r*=255;\r\n    g*=255;\r\n    b*=255;\r\n    const hexR = num2hex(r);\r\n    const hexG = num2hex(g);\r\n    const hexB = num2hex(b);\r\n    return `#${hexR}${hexG}${hexB}`;\r\n}\r\n\r\n\r\n // currentHue = 0.127;\r\n // CONJ_PHI =  0.618033988749895;\r\nexport function getColor(iter: number): string\r\n{\r\n    const hue = (0.127 + iter * 0.618033988749895) % 1;\r\n    const [h,s,v] = [hue*360, 0.5, 0.95];\r\n    return hsvToHex(h,s,v);\r\n}\r\n\r\n","import {getColor} from \"../apis/color-conversions-algorithms\";\r\n\r\nexport interface Entry\r\n{\r\n    numberOfCases: number;\r\n    numberOfDeaths: number;\r\n    numberOfRecoveries: number;\r\n    numberOfNewCases: number;\r\n    numberOfNewDeaths: number;\r\n    numberOfNewRecoveries: number;\r\n}\r\n\r\nexport function makeEntry(): Entry\r\n{\r\n    return {\r\n        numberOfCases: 0,\r\n        numberOfDeaths: 0,\r\n        numberOfRecoveries: 0,\r\n        numberOfNewCases: 0,\r\n        numberOfNewDeaths: 0,\r\n        numberOfNewRecoveries: 0,\r\n    };\r\n}\r\n\r\nexport interface TimeSeries\r\n{\r\n    name: string;\r\n    entries: Entry[];\r\n    active: boolean;\r\n    hexColor: string;\r\n}\r\n\r\nexport function makeTimeSeries(): TimeSeries\r\n{\r\n    return {\r\n        name: '',\r\n        entries: [],\r\n        active: false,\r\n        hexColor: '#246284'\r\n    };\r\n}\r\n\r\nexport interface DatedTimeSeries\r\n{\r\n    time: Date[];\r\n    data: TimeSeries[];\r\n}\r\n\r\n\r\nfunction equal3(a: number, b: number, c: number): boolean\r\n{\r\n    return (a === b && b === c);\r\n}\r\n\r\n// 2 list of increasing indices, both of same size\r\ninterface DatesIndices\r\n{\r\n    length: number,\r\n    indicesA: number[],\r\n    indicesB: number[],\r\n}\r\n\r\nfunction commonRange(a: Date[], b: Date[]): DatesIndices\r\n{\r\n    const res: DatesIndices = {length: 0, indicesA: [], indicesB: []};\r\n\r\n    // reading heads on list a, and list b\r\n    let idxA: number = 0;\r\n    let idxB: number = 0;\r\n    while (idxA < a.length && idxB < b.length)\r\n    {\r\n        // compare both dates\r\n        const valueA = a[idxA].valueOf();\r\n        const valueB = b[idxB].valueOf();\r\n        if (valueA === valueB)\r\n        {\r\n            res.indicesA.push(idxA++);\r\n            res.indicesB.push(idxB++);\r\n            res.length++;\r\n        }\r\n        else if (valueA < valueB)\r\n        {\r\n            idxA++;\r\n        }\r\n        else // valueA > valueB\r\n        {\r\n            idxB++;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction sumEntry(a: Entry, b: Entry): Entry\r\n{\r\n    return {\r\n        numberOfCases: a.numberOfCases + b.numberOfCases,\r\n        numberOfRecoveries: a.numberOfRecoveries + b.numberOfRecoveries,\r\n        numberOfDeaths: a.numberOfDeaths + b.numberOfDeaths,\r\n        numberOfNewCases: a.numberOfNewCases + b.numberOfNewCases,\r\n        numberOfNewRecoveries: a.numberOfNewRecoveries + b.numberOfNewRecoveries,\r\n        numberOfNewDeaths: a.numberOfNewDeaths + b.numberOfNewDeaths,\r\n    };\r\n}\r\n\r\n\r\n// Sum two dated time series with similar date spans and identical rows.\r\n// assumption: a and b have the same rows (same number of rows, and each row\r\n// of a is a time series with has the same name as the corresponding row of b).\r\nfunction sumDTS(dtsA: DatedTimeSeries, dtsB: DatedTimeSeries): DatedTimeSeries\r\n{\r\n    const dtsC: DatedTimeSeries = {time: [], data: []};\r\n    for (let k = 0; k < dtsA.data.length; k++)\r\n    {\r\n        const ts = makeTimeSeries();\r\n        ts.name = dtsA.data[k].name;\r\n        dtsC.data.push(ts);\r\n    }\r\n\r\n    const common = commonRange(dtsA.time, dtsB.time);\r\n    for (let idx = 0; idx < common.length; idx++)\r\n    {\r\n        const idxA = common.indicesA[idx];\r\n        const idxB = common.indicesB[idx];\r\n        dtsC.time.push(dtsA.time[idxA]);\r\n\r\n        // For each time series we are building,\r\n        // combine data from idxA in a, and from idxB in b\r\n        for (let k = 0; k < dtsA.data.length; k++)\r\n        {\r\n            const entA: Entry = dtsA.data[k].entries[idxA];\r\n            const entB: Entry = dtsB.data[k].entries[idxB];\r\n            const entC: Entry = sumEntry(entA, entB);\r\n            dtsC.data[k].entries.push(entC);\r\n        }\r\n    }\r\n\r\n    return dtsC;\r\n}\r\n\r\n\r\ninterface Dict\r\n{\r\n    [key: string]: number;\r\n}\r\n\r\n// const JHU_BIG = ['Canada', 'Australia', 'China'];\r\n// const JHU_DEP = ['Netherlands', 'United Kingdom', 'France', 'Denmark'];\r\n\r\nexport const CONFIRMED = 1;\r\nexport const RECOVERED = 2;\r\nexport const DECEASED = 3;\r\n// Transform a blob of data (parsed csv file from JHU) into a suitable dated\r\n// time series, by grouping all regions of the 'big' countries, and also by\r\n// grouping all dependencies of the 'dep' countries with their mainland.\r\nfunction rework(data: unknown[], ref: number): DatedTimeSeries\r\n{\r\n    // safeguard: there should be at least 1 line\r\n    if (data.length < 1)\r\n    {\r\n        throw new Error('No header!');\r\n    }\r\n    // each extracted time series will be stored in this array\r\n    const result: TimeSeries[] = [];\r\n\r\n    /* data table should look like so (each entry of data is a row array)\r\n     * 'Province/State' | 'Country/Region' | lat | lon | 1/1/20 | 2/1/20 ...\r\n     * Queensland       | Australia        | -27 | 153 | 94     | 144    ...\r\n     * ...\r\n     * ...\r\n     */\r\n\r\n    // Read the first row, infer the size and list of dates\r\n    const header = data[0] as string[];\r\n    // safeguard: we expect at least the first 4 columns\r\n    const size = header.length - 4;\r\n    if (size < 0)\r\n    {\r\n        throw new Error('Less than 4 columns in header!');\r\n    }\r\n\r\n    // dates are formatted 'MM/DD/YY' so new Date() should suffice\r\n    const dates: Date[] = new Array<Date>(size);\r\n    for (let idx = 0; idx < size; idx++)\r\n    {\r\n        dates[idx] = new Date(header[idx + 4]);\r\n    }\r\n\r\n    let dict: Dict = {};\r\n\r\n    // Now we attack the rows. We want to create one time series per country\r\n    // under our header. Note that the same country can appear on multiple\r\n    // rows, in which case we simply sum up the values on those rows.\r\n    for (let idx = 1; idx < data.length; idx++)\r\n    {\r\n        const row: string[] = data[idx] as string[];\r\n        if (row.length === header.length)\r\n        {\r\n            // each entry is a number (of people)\r\n            const data = new Array<number>(size);\r\n            for (let k = 0; k < size; k++)\r\n            {\r\n                data[k] = Number(row[4 + k]);\r\n            }\r\n\r\n            const countryName = row[1].trim();\r\n            let ts: TimeSeries = makeTimeSeries();\r\n\r\n            // The country exist: add data to the existing time series\r\n            if (countryName in dict)\r\n            {\r\n                ts = result[dict[countryName]];\r\n            }\r\n            // The country doesnt exist: use data to create new time series\r\n            else\r\n            {\r\n                dict[countryName] = result.length;\r\n                ts.name = countryName;\r\n                for (let k = 0; k < size; k++)\r\n                {\r\n                    ts.entries.push(makeEntry());\r\n                }\r\n                // build a new time series from the row\r\n                result.push(ts);\r\n            }\r\n\r\n            // add data to either the existing or newly created time series\r\n            for (let k = 0; k < size; k++)\r\n            {\r\n                switch (ref)\r\n                {\r\n                    case CONFIRMED:\r\n                        ts.entries[k].numberOfCases += data[k];\r\n                        break;\r\n                    case RECOVERED:\r\n                        ts.entries[k].numberOfRecoveries += data[k];\r\n                        break;\r\n                    case DECEASED:\r\n                        ts.entries[k].numberOfDeaths += data[k];\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            console.error(\r\n                `Ignored row ${idx} / ${data.length - 1}. It has ` +\r\n                `${row.length} columns, but header has ${header.length}`)\r\n        }\r\n    }\r\n\r\n\r\n    // sort resulting countries by name\r\n    result.sort((a, b) =>\r\n        a.name.localeCompare(b.name));\r\n\r\n    return {time: dates, data: result};\r\n}\r\n\r\n\r\nexport function getTSFromJHU_Data(dataConfirmed: unknown[],\r\n                                  dataRecovered: unknown[],\r\n                                  dataDeceased: unknown[])\r\n    : DatedTimeSeries\r\n{\r\n    const dtsCon = rework(dataConfirmed, CONFIRMED);\r\n    const dtsRec = rework(dataRecovered, RECOVERED);\r\n    const dtsDec = rework(dataDeceased, DECEASED);\r\n\r\n    console.log('C', dtsCon.data.length, dtsCon.time.length)\r\n    console.log('R', dtsRec.data.length, dtsRec.time.length)\r\n    console.log('D', dtsDec.data.length, dtsDec.time.length)\r\n\r\n    // safeguard: tables should have the same number of rows\r\n    if (!equal3(dtsCon.data.length, dtsRec.data.length, dtsDec.data.length))\r\n    {\r\n        throw new Error(`Entries count mismatch! ` +\r\n            `Confirmed ${dtsCon.data.length}, ` +\r\n            `Recovered ${dtsRec.data.length}, ` +\r\n            `Deceased ${dtsDec.data.length}`)\r\n    }\r\n\r\n    const dtsCR = sumDTS(dtsCon, dtsRec);\r\n    const dtsCRD = sumDTS(dtsCR, dtsDec);\r\n\r\n    // Compute a color for each time series\r\n    for (let it = 0; it < dtsCon.data.length; it++)\r\n    {\r\n        dtsCRD.data[it].hexColor = getColor(it);\r\n    }\r\n\r\n    // Compute number of new cases, recoveries, deaths (over 1 day) for each ts\r\n    for (let it = 0; it < dtsCon.data.length; it++)\r\n    {\r\n        const entries = dtsCRD.data[it].entries;\r\n        const summed = entries.map(\r\n            e => e.numberOfCases + e.numberOfRecoveries + e.numberOfDeaths);\r\n        entries[0].numberOfNewCases = entries[0].numberOfCases;\r\n        entries[0].numberOfNewRecoveries = entries[0].numberOfRecoveries;\r\n        entries[0].numberOfNewDeaths = entries[0].numberOfDeaths;\r\n        for (let u = 1; u < entries.length; u++)\r\n        {\r\n            const deltaC = summed[u] - summed[u - 1];\r\n            const deltaR =\r\n                entries[u].numberOfRecoveries -\r\n                entries[u - 1].numberOfRecoveries;\r\n            const deltaD =\r\n                entries[u].numberOfDeaths -\r\n                entries[u - 1].numberOfDeaths;\r\n            entries[u].numberOfNewCases = deltaC;\r\n            entries[u].numberOfNewRecoveries = deltaR;\r\n            entries[u].numberOfNewDeaths = deltaD;\r\n        }\r\n    }\r\n    return dtsCRD;\r\n}\r\n\r\n// {\r\n//     // safeguard: tables should have the same number of lines\r\n//     if (!equal3(dataConfirmed.length, dataRecovered.length,\r\n//         dataDeceased.length))\r\n//     {\r\n//         throw new Error(`Entries count mismatch! ` +\r\n//             `Confirmed ${dataConfirmed.length}, ` +\r\n//             `Recovered ${dataRecovered.length}, ` +\r\n//             `Deceased ${dataDeceased.length}`)\r\n//     }\r\n//     // safeguard: there should be at least 1 line per table\r\n//     if (dataConfirmed.length < 1)\r\n//     {\r\n//         throw new Error('No header!')\r\n//     }\r\n//\r\n//\r\n//     // each extracted time series will be stored in this array\r\n//     const result: TimeSeries[] = []\r\n//\r\n//     /* data table should look like so (each entry of data is a row array)\r\n//      * 'Province/State' | 'Country/Region' | lat | lon | 1/1/20 | 2/1/20 ...\r\n//      * Queensland       | Australia        | -27 | 153 | 94     | 144    ...\r\n//      * ...\r\n//      * ...\r\n//      */\r\n//\r\n//     // Read the first row, infer the size and list of dates\r\n//     const header = dataConfirmed[0] as string[];\r\n//\r\n//     // safeguard: tables should have the same number of columns\r\n//     const head2 = dataRecovered[0] as string[];\r\n//     const head3 = dataDeceased[0] as string[];\r\n//     if (!equal3(header.length, head2.length,\r\n//         head3.length))\r\n//     {\r\n//         throw new Error(`Column count mismatch! ` +\r\n//             `Confirmed ${header.length}, ` +\r\n//             `Recovered ${head2.length}, ` +\r\n//             `Deceased ${head3.length}`)\r\n//     }\r\n//\r\n//     // safeguard: we expect at least the first 4 columns to exist\r\n//     const numberOfDates = header.length - 4;\r\n//     if (numberOfDates < 0)\r\n//     {\r\n//         throw new Error('Less than 4 columns in header!')\r\n//     }\r\n//\r\n//     // dates are formatted 'MM/DD/YY' so new Date() should suffice\r\n//     const dates: Date[] = new Array<Date>(numberOfDates);\r\n//     for (let idx = 0; idx < numberOfDates; idx++)\r\n//     {\r\n//         dates[idx] = new Date(header[idx + 4]);\r\n//     }\r\n//\r\n//     // Create one time series per row under our header\r\n//     const numberOfEntries = dataConfirmed.length; // == rec.length == death.length\r\n//     for (let idx = 1; idx < numberOfEntries; idx++)\r\n//     {\r\n//         const rowC: string[] = dataConfirmed[idx] as string[];\r\n//         const rowR: string[] = dataRecovered[idx] as string[];\r\n//         const rowD: string[] = dataDeceased[idx] as string[];\r\n//\r\n//         if (rowC.length === header.length)\r\n//         {\r\n//             // build a new time series from the row\r\n//             const ts = makeTimeSeries();\r\n//             // Province, Country are string. Lat, Lon are numbers\r\n//             ts.provinceOrState = rowC[0].trim();\r\n//             ts.countryOrRegion = rowC[1].trim();\r\n//             ts.latitude = Number(rowC[2]);\r\n//             ts.longitude = Number(rowC[3]);\r\n//\r\n//             // each entry is a number (of people)\r\n//             ts.entries = new Array<Entry>(numberOfDates);\r\n//             for (let k = 0; k < numberOfDates; k++)\r\n//             {\r\n//                 const shiftedK = k + 4;\r\n//                 ts.entries[k] = {\r\n//                     numberOfCases: Number(rowC[shiftedK]),\r\n//                     numberOfRecoveries: Number(rowR[shiftedK]),\r\n//                     numberOfDeaths: Number(rowD[shiftedK]),\r\n//                 }\r\n//             }\r\n//             // unique id\r\n//             ts.id = idx;\r\n//             ts.name = ts.provinceOrState ?\r\n//                 `${ts.provinceOrState} (${ts.countryOrRegion})` :\r\n//                 `${ts.countryOrRegion}`;\r\n//\r\n//             // append the new time series\r\n//             result.push(ts);\r\n//         }\r\n//         else\r\n//         {\r\n//             console.error(`Ignored row ${idx} / ${numberOfEntries - 1}. ` +\r\n//                 `It has ${rowC.length} columns, header has ${header.length}`);\r\n//         }\r\n//     }\r\n//\r\n//     // all done\r\n//     return {time: dates, data: result};\r\n// }\r\n\r\n\r\n// {\r\n//     for (let k = 4; k < row.length; k++)\r\n//     {\r\n//         ts.entries.push(+row[k]);\r\n//     }\r\n//     result.push(ts);\r\n// }\r\n// // add 3 'total' entries for Australia, Canada, China\r\n// const spec: Country[] = [\r\n//     {name: \"Australia\", latitude: 25.2744, longitude: 133.7751},\r\n//     {name: \"Canada\", latitude: 56.1304, longitude: 106.3468},\r\n//     {name: \"China\", latitude: 35.8617, longitude: 104.1954}\r\n// ];\r\n// const added = spec.map(country => group(country, data));\r\n// added.forEach(ts => result.push(ts));\r\n// result.sort((a, b) =>\r\n//     (a.provinceOrState + a.countryOrRegion)\r\n//         .localeCompare(b.provinceOrState + b.countryOrRegion));\r\n\r\n\r\n// interface Country\r\n// {\r\n//     name: string;\r\n//     latitude: number;\r\n//     longitude: number;\r\n// }\r\n//\r\n// function group(country: Country, data: TimeSeries[]): TimeSeries\r\n// {\r\n//     const total = makeTimeSeries();\r\n//     total.provinceOrState = country.name;\r\n//     total.latitude = country.latitude;\r\n//     total.longitude = country.longitude;\r\n//\r\n//     const filtered = data.filter(ts => ts.provinceOrState === country.name);\r\n//     console.log(country.name, filtered.length, filtered);\r\n//     if (filtered.length > 0)\r\n//     {\r\n//         for (let j = 0; j < filtered[0].entries.length; j++)\r\n//         {\r\n//             let nb = 0;\r\n//             for (let i = 0; i < filtered.length; i++)\r\n//             {\r\n//                 nb += filtered[i].entries[j];\r\n//             }\r\n//             total.entries.push(nb);\r\n//         }\r\n//     }\r\n//     return total;\r\n// }\r\n","import React from \"react\";\r\nimport {Form, Row, Col, FormCheck} from \"react-bootstrap\";\r\nimport {GRAPH_MODE, InputRange} from \"./GraphView\";\r\n\r\n\r\ninterface ParamsViewProps\r\n{\r\n    range: InputRange;\r\n    doublingRange: InputRange;\r\n    mode: string;\r\n    doShowRef: boolean;\r\n    doShowLegend: boolean;\r\n\r\n    onModeChange(mode: string): void;\r\n\r\n    onScaleChange(isLogPlot: boolean): void;\r\n\r\n    onDaysChange(numberOfDays: number): void;\r\n\r\n    onDoublingDaysChange(doublingDays: number): void;\r\n\r\n    onShowRefChange(doShowRef: boolean): void;\r\n\r\n    onShowLegendChange(doShowRef: boolean): void;\r\n}\r\n\r\nexport function ParamsView(props: ParamsViewProps)\r\n{\r\n\r\n    const handleModeChange = (e: any) =>\r\n    {\r\n        const mode: string = e.target.value;\r\n        props.onModeChange(mode);\r\n    };\r\n\r\n    const handleScaleChange = (e: any) =>\r\n    {\r\n        const scaleType: string = e.target.value;\r\n        props.onScaleChange(scaleType === 'log');\r\n    };\r\n\r\n    const handleDaysChange = (e: any) =>\r\n    {\r\n        const val = Number(e.target.value);\r\n        props.onDaysChange(val);\r\n    };\r\n\r\n    const handleDoublingDaysChange = (e: any) =>\r\n    {\r\n        const val = Number(e.target.value);\r\n        props.onDoublingDaysChange(val);\r\n    };\r\n\r\n    const handleShowRefChange = (e: any) =>\r\n    {\r\n        const val = e.target.checked;\r\n        props.onShowRefChange(val);\r\n    }\r\n    const handleShowLegendChange = (e: any) =>\r\n    {\r\n        const val = e.target.checked;\r\n        props.onShowLegendChange(val);\r\n    }\r\n\r\n    const modeForm = (\r\n        <Form.Group id=\"form.ControlMode\">\r\n            <Form.Label>Select mode:</Form.Label>\r\n            <Form.Control as=\"select\"\r\n                          size=\"sm\"\r\n                          onChange={handleModeChange}>\r\n                <option value={GRAPH_MODE.newVSTotalConfirmed}>\r\n                    New/Total Cases\r\n                </option>\r\n                <option value={GRAPH_MODE.totalConfirmedVSTime}>\r\n                    Total Cases(t)\r\n                </option>\r\n                <option value={GRAPH_MODE.totalRecoveredVSTime}>\r\n                    Total Recoveries(t)\r\n                </option>\r\n                <option value={GRAPH_MODE.totalDeceasedVSTime}>\r\n                    Total Deaths(t)\r\n                </option>\r\n                <option value={GRAPH_MODE.newConfirmedVSTime}>\r\n                    New Cases(t)\r\n                </option>\r\n                <option value={GRAPH_MODE.newRecoveredVSTime}>\r\n                    New Recoveries(t)\r\n                </option>\r\n                <option value={GRAPH_MODE.newDeceasedVSTime}>\r\n                    New Deaths(t)\r\n                </option>\r\n            </Form.Control>\r\n        </Form.Group>);\r\n\r\n    const scaleForm = (\r\n        <Form.Group id=\"form.ControlScale\">\r\n            <Form.Label>Select scale:</Form.Label>\r\n            <Form.Control as=\"select\"\r\n                          size=\"sm\"\r\n                          onChange={handleScaleChange}>\r\n                <option value='log'>Logarithmic</option>\r\n                <option value='lin'>Linear</option>\r\n            </Form.Control>\r\n        </Form.Group>\r\n    );\r\n\r\n    const daysForm = (\r\n        <div id=\"form.ControlDays\">\r\n            Smooth data over <span>\r\n                <input className=\"input-small-number\"\r\n                       type=\"number\"\r\n                       onChange={handleDaysChange}\r\n                       min={props.range.min}\r\n                       max={props.range.max}\r\n                       step={1}\r\n                       value={props.range.val}\r\n                       onKeyDown={(e) =>\r\n                       {\r\n                           e.preventDefault();\r\n                           return false;\r\n                       }}/>\r\n            </span> {props.range.val > 1 ? 'days' : 'day'}\r\n        </div>\r\n    );\r\n\r\n    const label = (\r\n        <label htmlFor=\"double-check\">\r\n            Show {props.doublingRange.val} {props.doublingRange.val > 1 ?\r\n            'days' : 'day'} doubling time\r\n        </label>);\r\n    const doublingDaysForm = (\r\n        <div id=\"form.ControlDoublingDays\">\r\n            <FormCheck\r\n                id=\"double-check\"\r\n                type='checkbox'\r\n                label={label}\r\n                checked={props.doShowRef}\r\n                onChange={handleShowRefChange}\r\n            />\r\n            <Form.Control type=\"range\"\r\n                          onChange={handleDoublingDaysChange}\r\n                          min={props.doublingRange.min}\r\n                          max={props.doublingRange.max}\r\n                          step={1}\r\n                          value={props.doublingRange.val}\r\n            />\r\n        </div>\r\n    );\r\n\r\n\r\n    const showLegend = (<FormCheck\r\n        id=\"legend\"\r\n        type='checkbox'\r\n        label='Show legend'\r\n        checked={props.doShowLegend}\r\n        onChange={handleShowLegendChange}\r\n    />);\r\n\r\n    const showDoublingDays = [GRAPH_MODE.newVSTotalConfirmed]\r\n        .includes(props.mode);\r\n\r\n    return (\r\n        <div className=\"params-view\">\r\n            <Form>\r\n                <Row>\r\n                    <Col>{modeForm}</Col>\r\n                    <Col>{scaleForm}</Col>\r\n                    <Col>\r\n                        <Form.Row>{daysForm}</Form.Row>\r\n                        <Form.Row>{showLegend}</Form.Row>\r\n                    </Col>\r\n                    {showDoublingDays &&\r\n                    <Col>\r\n                        {doublingDaysForm}\r\n                    </Col>\r\n                    }\r\n                </Row>\r\n            </Form>\r\n        </div>\r\n    );\r\n    // }\r\n}\r\n","import Plot from \"react-plotly.js\";\r\nimport React, {Component} from \"react\";\r\nimport {DatedTimeSeries, Entry, TimeSeries} from \"../models/timeSeries\";\r\nimport {AxisType, Data} from \"plotly.js\";\r\nimport {ParamsView} from \"./ParamsView\";\r\nimport {Alert, Row} from \"react-bootstrap\";\r\n\r\n// const clamp = (x: number, min: number, max: number) =>\r\n//     Math.max(min, Math.min(x, max));\r\n\r\nexport const GRAPH_MODE = Object.freeze({\r\n    totalConfirmedVSTime: \"total cases vs t\",\r\n    totalRecoveredVSTime: \"total recoveries vs t\",\r\n    totalDeceasedVSTime: \"total deaths vs t\",\r\n    newConfirmedVSTime: \"new cases vs t\",\r\n    newRecoveredVSTime: \"new recoveries vs t\",\r\n    newDeceasedVSTime: \"new deaths vs t\",\r\n    newVSTotalConfirmed: \"daily vs current cases\",\r\n});\r\n\r\nexport interface InputRange\r\n{\r\n    min: number;\r\n    val: number;\r\n    max: number;\r\n}\r\n\r\nfunction format(d: Date): string\r\n{\r\n    // YYYY-MM-DD\r\n    return d.toISOString().slice(0, 10);\r\n}\r\n\r\nfunction formatHuman(d: Date): string\r\n{\r\n    const tmp = d.toISOString();\r\n    return `${tmp.slice(8, 10)}/${tmp.slice(5, 7)}/${tmp.slice(0, 4)}`;\r\n}\r\n\r\ninterface GraphViewProps\r\n{\r\n    dts: DatedTimeSeries;\r\n}\r\n\r\ninterface GraphViewState\r\n{\r\n    // graph mode\r\n    mode: string;\r\n    // number of days used for computing smooth averages\r\n    numberOfDays: number;\r\n    doublingDays: number;\r\n    // true for log plots (otherwise linear scale)\r\n    isLogPlot: boolean;\r\n    doShowRef: boolean;\r\n    doShowLegend: boolean;\r\n}\r\n\r\ninterface MinMax\r\n{\r\n    min: number;\r\n    max: number;\r\n}\r\n\r\nfunction getMinMax(values: number[]): MinMax\r\n{\r\n    const reducerMinMax = (acc: MinMax, val: number) =>\r\n    {\r\n        acc.min = Math.min(acc.min, val);\r\n        acc.max = Math.max(acc.max, val);\r\n        return acc;\r\n    }\r\n    const init: MinMax = {min: Number.MAX_VALUE, max: Number.MIN_VALUE};\r\n    return values.reduce(reducerMinMax, init);\r\n}\r\n\r\n\r\n// The graph component displays a plot depending on the currently activated\r\n// countries. It also depends on the view mode (enum GRAPH_MODE) and other\r\n// parameters to determine what type of plot is drawn\r\nexport class GraphView\r\n    extends Component<GraphViewProps, GraphViewState>\r\n{\r\n    constructor(props: GraphViewProps)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            mode: GRAPH_MODE.newVSTotalConfirmed,\r\n            numberOfDays: 15,\r\n            doublingDays: 14,\r\n            isLogPlot: true,\r\n            doShowRef: true,\r\n            doShowLegend: true,\r\n        }\r\n    }\r\n\r\n\r\n    timeValue(e: Entry): number\r\n    {\r\n        switch (this.state.mode)\r\n        {\r\n            case GRAPH_MODE.totalConfirmedVSTime :\r\n                return e.numberOfCases;\r\n            case GRAPH_MODE.totalRecoveredVSTime :\r\n                return e.numberOfRecoveries;\r\n            case GRAPH_MODE.totalDeceasedVSTime :\r\n                return e.numberOfDeaths;\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n\r\n    template(): string\r\n    {\r\n        const {mode} = this.state;\r\n        const date = mode === GRAPH_MODE.newVSTotalConfirmed ? '%{text}<br>' : '';\r\n        return ('<i><b>%{fullData.name}</b></i><br>' +\r\n            date +\r\n            '%{xaxis.title.text}: %{x}<br>' +\r\n            '%{yaxis.title.text}: %{y}<br>' +\r\n            '<extra></extra>');\r\n    }\r\n\r\n    getData(): Data[]\r\n    {\r\n        const activeTS = this.props.dts.data.filter(ts => ts.active);\r\n        const dates: string[] = this.props.dts.time.map(d => format(d));\r\n        if (activeTS.length === 0)\r\n        {\r\n            return [];\r\n        }\r\n\r\n        const res: Data[] = [];\r\n        let xMin: number = Number.MAX_VALUE;\r\n        let xMax: number = Number.MIN_VALUE;\r\n        const {doShowRef, mode, doShowLegend} = this.state;\r\n        for (const ts of activeTS)\r\n        {\r\n            const xDataVal = this.xData(ts);\r\n            const minMax = getMinMax(xDataVal\r\n                .map((d: number | string) => Number(d)));\r\n            xMin = Math.min(xMin, minMax.min);\r\n            xMax = Math.max(xMax, minMax.max);\r\n            const trace: Data = {\r\n                type: \"scatter\",\r\n                mode: \"lines\",\r\n                name: ts.name,\r\n                x: xDataVal,\r\n                y: this.yData(ts),\r\n                text: dates,\r\n                hovertemplate: this.template(),\r\n                showlegend: doShowLegend,\r\n                line: {color: ts.hexColor}\r\n            };\r\n\r\n            res.push(trace);\r\n        }\r\n\r\n\r\n        if (doShowRef && mode === GRAPH_MODE.newVSTotalConfirmed)\r\n        {\r\n            const {doublingDays} = this.state;\r\n            // const nbPoints = dates.length - 1;\r\n            // const delta = (xMax - xMin) / nbPoints;\r\n            // const xRef = dates.map(\r\n            //     (date, index) => xMin + delta * index);\r\n            const xRef = [xMin, xMax];\r\n            const yRef = xRef.map(x => x / doublingDays);\r\n\r\n            const refTrace: Data = {\r\n                type: \"scatter\",\r\n                mode: \"lines\",\r\n                name: 'ref',\r\n                x: xRef,\r\n                y: yRef,\r\n                line: {\r\n                    color: '#9335a8',\r\n                    dash: \"dashdot\",\r\n                },\r\n                hoverinfo: \"skip\",\r\n                showlegend: false\r\n            };\r\n            res.push(refTrace);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    // Extract the abscissa of a time series data points\r\n    xData(ts: TimeSeries): number[] | string[]\r\n    {\r\n        const {mode} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalConfirmedVSTime :\r\n            case GRAPH_MODE.totalRecoveredVSTime :\r\n            case GRAPH_MODE.totalDeceasedVSTime :\r\n            case GRAPH_MODE.newConfirmedVSTime :\r\n            case GRAPH_MODE.newRecoveredVSTime :\r\n            case GRAPH_MODE.newDeceasedVSTime :\r\n                return this.props.dts.time.map(d => format(d));\r\n            case GRAPH_MODE.newVSTotalConfirmed :\r\n                return ts.entries.map(e => e.numberOfCases);\r\n            default:\r\n                throw new Error(`Unknown mode ${mode}`);\r\n        }\r\n    }\r\n\r\n    smooth(values: number[], count: number): number[]\r\n    {\r\n        const result = new Array<number>(values.length);\r\n        for (let t = 0; t < values.length; t++)\r\n        {\r\n            const from = Math.max(0, t + 1 - count);\r\n            let avg = 0;\r\n            for (let j = from; j <= t; j++)\r\n            {\r\n                avg += values[j];\r\n            }\r\n            result[t] = avg / (t - from + 1);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Extract the ordinate of a time series data points\r\n    yData(ts: TimeSeries): number[]\r\n    {\r\n        const {mode, numberOfDays} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalConfirmedVSTime :\r\n                return ts.entries.map(e => e.numberOfCases);\r\n            case GRAPH_MODE.totalRecoveredVSTime :\r\n                return ts.entries.map(e => e.numberOfRecoveries);\r\n            case GRAPH_MODE.totalDeceasedVSTime :\r\n                return ts.entries.map(e => e.numberOfDeaths);\r\n            case GRAPH_MODE.newConfirmedVSTime :\r\n            case GRAPH_MODE.newVSTotalConfirmed :\r\n                const tmpC = ts.entries.map(e => e.numberOfNewCases);\r\n                return this.smooth(tmpC, numberOfDays);\r\n            case GRAPH_MODE.newRecoveredVSTime :\r\n                const tmpR = ts.entries.map(e => e.numberOfNewRecoveries);\r\n                return this.smooth(tmpR, numberOfDays);\r\n            case GRAPH_MODE.newDeceasedVSTime :\r\n                const tmpD = ts.entries.map(e => e.numberOfNewDeaths);\r\n                return this.smooth(tmpD, numberOfDays);\r\n            default:\r\n                throw new Error(`Unknown mode ${mode}`);\r\n        }\r\n    }\r\n\r\n    onModeChange = (newMode: string) =>\r\n    {\r\n        this.setState({mode: newMode});\r\n    };\r\n    onScaleChange = (newIsLogPlot: boolean) =>\r\n    {\r\n        this.setState({isLogPlot: newIsLogPlot});\r\n    };\r\n    onDaysChange = (newNumberOfDays: number) =>\r\n    {\r\n        this.setState({\r\n            numberOfDays: newNumberOfDays\r\n        });\r\n    };\r\n    onDoublingDaysChange = (newDoublingDays: number) =>\r\n    {\r\n        this.setState({\r\n            doublingDays: newDoublingDays\r\n        });\r\n    };\r\n    onShowRefChange = (newShowRef: boolean) =>\r\n    {\r\n        this.setState({\r\n            doShowRef: newShowRef\r\n        });\r\n    };\r\n    onShowLegendChange = (newShowLegend: boolean) =>\r\n    {\r\n        this.setState({\r\n            doShowLegend: newShowLegend\r\n        });\r\n    };\r\n\r\n    private get xAxisTitle(): string\r\n    {\r\n        const {mode} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalRecoveredVSTime:\r\n            case GRAPH_MODE.totalConfirmedVSTime:\r\n            case GRAPH_MODE.totalDeceasedVSTime:\r\n            case GRAPH_MODE.newConfirmedVSTime:\r\n                return 'Date';\r\n            case GRAPH_MODE.newVSTotalConfirmed:\r\n                return 'Total Confirmed Cases';\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    private get xTickFormat(): string\r\n    {\r\n        const {mode} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalRecoveredVSTime:\r\n            case GRAPH_MODE.totalConfirmedVSTime:\r\n            case GRAPH_MODE.totalDeceasedVSTime:\r\n            case GRAPH_MODE.newConfirmedVSTime:\r\n                return \"%d %b %Y\";\r\n            case GRAPH_MODE.newVSTotalConfirmed:\r\n                return \",.0f\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    private get xAxisType(): AxisType\r\n    {\r\n        const {mode, isLogPlot} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalRecoveredVSTime:\r\n            case GRAPH_MODE.totalConfirmedVSTime:\r\n            case GRAPH_MODE.totalDeceasedVSTime:\r\n            case GRAPH_MODE.newConfirmedVSTime:\r\n            case GRAPH_MODE.newRecoveredVSTime:\r\n            case GRAPH_MODE.newDeceasedVSTime:\r\n                return 'date';\r\n            case GRAPH_MODE.newVSTotalConfirmed:\r\n                return isLogPlot ? 'log' : 'linear';\r\n            default:\r\n                return '-';\r\n        }\r\n    }\r\n\r\n    private get yAxisType(): AxisType\r\n    {\r\n        const {mode, isLogPlot} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalRecoveredVSTime:\r\n            case GRAPH_MODE.totalConfirmedVSTime:\r\n            case GRAPH_MODE.totalDeceasedVSTime:\r\n            case GRAPH_MODE.newConfirmedVSTime:\r\n            case GRAPH_MODE.newRecoveredVSTime:\r\n            case GRAPH_MODE.newDeceasedVSTime:\r\n            case GRAPH_MODE.newVSTotalConfirmed:\r\n                return isLogPlot ? 'log' : 'linear';\r\n            default:\r\n                return '-';\r\n        }\r\n    }\r\n\r\n    private get yAxisTitle(): string\r\n    {\r\n        const {mode, numberOfDays} = this.state;\r\n        switch (mode)\r\n        {\r\n            case GRAPH_MODE.totalRecoveredVSTime:\r\n                return 'Total Recoveries';\r\n            case GRAPH_MODE.totalConfirmedVSTime:\r\n                return 'Total Confirmed Cases';\r\n            case GRAPH_MODE.totalDeceasedVSTime:\r\n                return 'Total Reported Deaths';\r\n            case GRAPH_MODE.newConfirmedVSTime:\r\n            case GRAPH_MODE.newVSTotalConfirmed:\r\n                const note = numberOfDays > 1 ?\r\n                    `(${numberOfDays} days avg.)` : '';\r\n                return `Daily Cases ${note}`\r\n            default:\r\n                return '';\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element\r\n    {\r\n        const {mode} = this.state;\r\n        // this.props.dts.data\r\n        //     .filter(d=>d.name===\"France\")\r\n        //     .forEach(ts=>{console.log(\"France: \", ts.hexColor)});\r\n        const dates = this.props.dts.time;\r\n        let title = 'No data provided';\r\n        if (dates.length >= 1)\r\n        {\r\n            const start = formatHuman(dates[0]);\r\n            const end = formatHuman(dates[dates.length - 1]);\r\n            title = `Trajectory of World COVID-19 (${mode}) from ${start} to ${end}`;\r\n        }\r\n\r\n        const layout = {\r\n            title: {\r\n                text: title,\r\n                font: {\r\n                    size: 18,\r\n                }\r\n            },\r\n            xaxis: {\r\n                title: {\r\n                    text: this.xAxisTitle,\r\n                    font: {\r\n                        size: 14,\r\n                        color: '#3649b1'\r\n                    }\r\n                },\r\n                type: this.xAxisType,\r\n                hoverformat: this.xTickFormat,\r\n            },\r\n            yaxis: {\r\n                title: {\r\n                    text: this.yAxisTitle,\r\n                    font: {\r\n                        size: 14,\r\n                        color: '#3649b1'\r\n                    }\r\n                },\r\n                type: this.yAxisType,\r\n                hoverformat: \",.0f\",\r\n            },\r\n            autosize: true,\r\n            legend: {\r\n                x: 0,\r\n                y: 1,\r\n                font: {\r\n                    family: 'sans-serif',\r\n                    size: 12,\r\n                    color: '#000'\r\n                },\r\n                bgcolor: '#E2E2E2',\r\n                bordercolor: '#FFFFFF',\r\n                borderwidth: 2\r\n            }\r\n        }\r\n\r\n        const config = {responsive: true}\r\n        const data: Data[] = this.getData();\r\n        const plot = data.length > 0\r\n            ? (<Plot className={'graph'}\r\n                     data={data}\r\n                     layout={layout}\r\n                     config={config}\r\n                     useResizeHandler={true}/>)\r\n            : (<Alert variant=\"warning\">\r\n                    <Alert.Heading>Oops, there is no data to display !</Alert.Heading>\r\n                    <hr/>\r\n                    <p>\r\n                        Please select at least one country in the right panel\r\n                        to display a plot.\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                        If that doesn't work, try hitting your F5 key to\r\n                        refresh the page.\r\n                    </p>\r\n                    <p className=\"mb-0\">\r\n                        If that doesn't work, maybe the data\r\n                        cannot be retrieved, or maybe you've encountered a bug.\r\n                    </p>\r\n                </Alert>\r\n            );\r\n\r\n        const {numberOfDays, doublingDays} = this.state;\r\n        const range: InputRange = {min: 1, val: numberOfDays, max: 30};\r\n        const doublingRange: InputRange = {min: 1, val: doublingDays, max: 100};\r\n        return (\r\n            <div>\r\n                <Row className=\"body-graph\">\r\n                    <div className=\"graph-view\">\r\n                        {plot}\r\n                    </div>\r\n                </Row>\r\n                <Row className=\"footer-graph\">\r\n                    <ParamsView range={range}\r\n                                doublingRange={doublingRange}\r\n                                mode={mode}\r\n                                doShowRef={this.state.doShowRef}\r\n                                doShowLegend={this.state.doShowLegend}\r\n                                onModeChange={this.onModeChange}\r\n                                onScaleChange={this.onScaleChange}\r\n                                onDaysChange={this.onDaysChange}\r\n                                onShowRefChange={this.onShowRefChange}\r\n                                onShowLegendChange={this.onShowLegendChange}\r\n                                onDoublingDaysChange={this.onDoublingDaysChange}\r\n                    />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport {CountryFilter} from \"./CountryFilter\";\r\nimport API, {TS_CONFIRMED, TS_DECEASED, TS_RECOVERED} from \"../apis/api\";\r\nimport {readString} from \"react-papaparse\"\r\nimport {\r\n    DatedTimeSeries,\r\n    getTSFromJHU_Data, TimeSeries,\r\n} from \"../models/timeSeries\";\r\nimport {Container, Row, Col} from \"react-bootstrap\";\r\nimport {GraphView} from \"./GraphView\";\r\n\r\nconst PRESET = ['france', 'spain', 'italy', 'united kingdom', 'india'];\r\n\r\ninterface CovidTrackerProps\r\n{\r\n}\r\n\r\ninterface CovidTrackerState\r\n{\r\n    // All covid-19 data fetched from John Hopkins University\r\n    dts: DatedTimeSeries;\r\n}\r\n\r\n\r\n// This is the application main smart component. It encapsulates all of the\r\n// internal logic for our covid tracker. Its child components can thus be\r\n// stateless and simply be used to display information.\r\n// - Data (in the form of time series) is fetched once, on initialization,\r\n//   and is not altered after that.\r\n// - Some time series can be activated or deactivated by child components\r\n// - Display parameters can be modified by child components\r\nexport class CovidTracker\r\n    extends Component<CovidTrackerProps, CovidTrackerState>\r\n{\r\n    constructor(props: CovidTrackerProps)\r\n    {\r\n        super(props);\r\n        this.state = {\r\n            dts: {time: [], data: []}\r\n        };\r\n    }\r\n\r\n    // Toggles the active status of a time series\r\n    // Note: arrow fn is used here to correctly bind 'this' when passing\r\n    // this function as a child component props\r\n    onToggleActiveTS = (ts: TimeSeries) =>\r\n    {\r\n        // toggle active status\r\n        ts.active = !ts.active;\r\n        // re-render\r\n        this.setState({});\r\n    };\r\n\r\n    onSelectAll = (select: boolean) =>\r\n    {\r\n        const {dts} = this.state;\r\n        dts.data.forEach( ts => ts.active = select);\r\n        this.setState({});\r\n    }\r\n\r\n    // Loads time series once, on initialisation\r\n    private loadTimeSeries(url: string): Promise<unknown[]>\r\n    {\r\n        return API.get<string>(url)\r\n            .then(response => response.data)\r\n            .then(csvString => readString(csvString))\r\n            .then(parseResult => parseResult.data);\r\n    }\r\n\r\n    // On initialisation, download all time series\r\n    componentDidMount(): void\r\n    {\r\n        // For each time series, we need to download the data and then\r\n        // compile it into a TimeSeries with one Entry per timestamp\r\n        Promise.all([\r\n            this.loadTimeSeries(TS_CONFIRMED),\r\n            this.loadTimeSeries(TS_RECOVERED),\r\n            this.loadTimeSeries(TS_DECEASED)]).then(\r\n            (values) =>\r\n            {\r\n                const dts = getTSFromJHU_Data(\r\n                    values[0], values[1], values[2]);\r\n                dts.data.forEach(\r\n                    ts => ts.active = PRESET.includes(ts.name.toLowerCase()));\r\n                this.setState({\r\n                    dts: dts,\r\n                });\r\n            });\r\n    }\r\n\r\n    render(): JSX.Element\r\n    {\r\n        return (\r\n            <Container fluid className='container-app'>\r\n                <Row>\r\n                    <Col className='col-graph-view'>\r\n                        <GraphView dts={this.state.dts}/>\r\n                    </Col>\r\n                    <Col sm={2} className='col-country'>\r\n                        <CountryFilter\r\n                            series={this.state.dts}\r\n                            onToggleActiveTS={this.onToggleActiveTS}\r\n                            onSelectAll={this.onSelectAll}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport {Button, Overlay, Popover} from \"react-bootstrap\";\r\n\r\ninterface CustomPopoverProps\r\n{\r\n    buttonTitle: string;\r\n    popoverId: string;\r\n    popoverTitle: string;\r\n    popoverContent: JSX.Element;\r\n}\r\n\r\nexport default function CustomPopover(props: CustomPopoverProps)\r\n{\r\n    const [show, setShow] = React.useState(false);\r\n    const [target, setTarget] = React.useState(null);\r\n    const ref = React.useRef(null);\r\n    const handleClick = (event: any) =>\r\n    {\r\n        setShow(!show);\r\n        setTarget(event.target);\r\n    };\r\n    return (\r\n        <div ref={ref}>\r\n            <Button onClick={handleClick}\r\n                    variant=\"primary\"\r\n                    className=\"navbar-button\"\r\n            >\r\n                {props.buttonTitle}\r\n            </Button>\r\n            <Overlay\r\n                show={show}\r\n                target={target}\r\n                placement=\"bottom\"\r\n                container={ref.current}\r\n                containerPadding={20}\r\n                onEnter={undefined}\r\n                onEntered={undefined}\r\n                onEntering={undefined}\r\n                onExit={undefined}\r\n                onExited={undefined}\r\n                onExiting={undefined}\r\n                onHide={() =>\r\n                {\r\n                    setShow(false)\r\n                }}\r\n                transition={false}\r\n                rootClose={true}\r\n                popperConfig={undefined}\r\n                rootCloseEvent={undefined}>\r\n                <Popover id={`custom-popover-${props.popoverId}`}>\r\n                    <Popover.Title as=\"h3\">\r\n                        {props.popoverTitle}\r\n                    </Popover.Title>\r\n                    <Popover.Content>\r\n                        {props.popoverContent}\r\n                    </Popover.Content>\r\n                </Popover>\r\n            </Overlay>\r\n        </div>\r\n    );\r\n}\r\n","import {Navbar, Nav} from \"react-bootstrap\";\r\nimport logo from \"../logo.svg\";\r\nimport React from \"react\";\r\nimport CustomPopover from \"./CustomPopover\";\r\n\r\nexport default function Header()\r\n{\r\n    const credits = (\r\n        <div>\r\n            <p>\r\n                This project takes inspiration from the works of <a\r\n                href=\"https://aatishb.com/\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\">Aatish\r\n                Bhatia</a> and <a\r\n                href=\"https://www.youtube.com/user/minutephysics\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\">Minute Physics</a>. Credit goes\r\n                to them for the original idea.\r\n                Check out their original project <a\r\n                href=\"https://aatishb.com/covidtrends/\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"> over here</a> !\r\n            </p>\r\n            <p>\r\n                My objective was to recreate a similar app by using\r\n                React instead of Vue, as a part of my training with\r\n                React and TypeScript. The source for my version of\r\n                the app can be found <a\r\n                href=\"https://github.com/daholou/react-covid-tracker\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\">\r\n                right here</a> !\r\n            </p>\r\n        </div>\r\n    );\r\n\r\n    const about = (\r\n        <div>\r\n            <p>\r\n                The world data is provided by <a\r\n                href={\"https://github.com/CSSEGISandData/COVID-19/tree/master/csse_covid_19_data/csse_covid_19_time_series\"}\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\">Johns Hopkins University</a> (\r\n                updates daily around 23:59 UTC).\r\n            </p>\r\n            <p>\r\n                I would like to thank Johns Hopkins University for\r\n                making this data publicly available, this kind of\r\n                project would not be possible without it.\r\n            </p>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" className=\"header-app\"\r\n                expand=\"sm\">\r\n            <Navbar.Brand>COVID-19 Tracker</Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                <Nav className=\"mr-auto\" as=\"ul\">\r\n                    <Nav.Item as=\"li\">\r\n                        <Nav.Link href=\"https://reactjs.org/\"\r\n                                  target=\"_blank\"\r\n                                  rel=\"noreferrer\">\r\n                            <img src={logo}\r\n                                 className=\"App-logo\"\r\n                                 alt=\"logo\"/>\r\n                            Powered by ReactJS\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <CustomPopover buttonTitle='Credits & Source'\r\n                                       popoverId='credits'\r\n                                       popoverTitle='About this WebApp'\r\n                                       popoverContent={credits}/>\r\n                    </Nav.Item>\r\n                    <Nav.Item as=\"li\">\r\n                        <CustomPopover buttonTitle='COVID-19 World Data'\r\n                                       popoverId='about'\r\n                                       popoverTitle='Data Origin'\r\n                                       popoverContent={about}/>\r\n                    </Nav.Item>\r\n                </Nav>\r\n            </Navbar.Collapse>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {CovidTracker} from \"./components/CovidTracker\";\nimport Header from \"./components/Header\";\n\nexport default function App()\n{\n    return (\n        <div className=\"app-frame\">\n            <Header/>\n            <CovidTracker/>\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}